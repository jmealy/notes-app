{"version":3,"sources":["Toolbar/Toolbar.js","Editor/Editor.js","Note/Note.js","NotesList/NotesList.js","App/App.js","registerServiceWorker.js","index.js"],"names":["Toolbar","react_default","a","createElement","className","onClick","this","props","onDelete","onAdd","Component","Editor","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","noteText","onTextChange","bind","assertThisInitialized","nextProps","prevState","setState","event","target","value","onNoteChange","isEnabled","onChange","Note","index","onNoteSelect","_this$props","title","isSelected","prunedTitle","length","concat","substring","NotesList","_this2","notes","selectedNote","map","note","src_Note_Note","key","App","saveNotes","localStorage","setItem","JSON","stringify","addNewNote","unshift","text","deleteCurrentNote","_this$state","splice","selected","changeSelectedNote","noteIndex","updateNoteValue","_this$state2","newNotes","slice","split","parse","getItem","_this$state3","src_Toolbar_Toolbar","src_NotesList_NotesList","src_Editor_Editor","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_App_App","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.e622cd64.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Toolbar.css'\n\nclass Toolbar extends Component {\n  render() {\n    return (\n      <div className='Toolbar'>\n        <div onClick={ this.props.onDelete }className=\"delete fa fa-2x fa-trash\"></div>\n        <div onClick={ this.props.onAdd } className=\"add fa fa-2x fa-plus\"></div>\n      </div>\n    );\n  }\n}\n\nexport default Toolbar;","import React, { Component } from 'react';\nimport './Editor.css';\n\nclass Editor extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      noteText: props.noteText\n    }\n\n    this.onTextChange = this.onTextChange.bind(this);\n  }\n\n  componentWillReceiveProps(nextProps, prevState) {\n    if (prevState.noteText !== nextProps.noteText) {\n      this.setState({ noteText: nextProps.noteText });\n    }\n  }\n\n  onTextChange(event) {\n    this.setState({ noteText: event.target.value });\n    this.props.onNoteChange(event.target.value);\n  }\n\n  render() {\n    const { isEnabled } = this.props;\n    if (isEnabled) {\n      return (\n        <textarea className=\"Editor\" value={ this.state.noteText } onChange={ this.onTextChange }></textarea>\n      );\n    }\n    return '';\n  }\n}\n\nexport default Editor;","import React, { Component } from 'react';\nimport './Note.css'\n\nclass Note extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.onClick = this.onClick.bind(this);\n  }\n\n  onClick() {\n    const { index } = this.props;\n    this.props.onNoteSelect(index);\n  }\n\n\n  render() {\n    const { title, isSelected } = this.props;\n\n    const prunedTitle = title.length > 25 ? `${title.substring(0,25)}...` : title;\n\n    return (\n      <div\n        className={ `Note ${ isSelected ? 'selectedNote' : '' }` }\n        onClick={ this.onClick }\n      >\n        <div className='NoteTitle'>{ prunedTitle }</div>\n      </div>\n    );\n  }\n}\n\nexport default Note;","import React, { Component } from 'react';\nimport Note from '../Note/Note';\nimport './NotesList.css'\n\nclass NotesList extends Component {\n\n  constructor(props) {\n    super(props);\n    this.onNoteSelect = this.onNoteSelect.bind(this);\n  }\n\n  onNoteSelect(index) {\n    this.props.onNoteSelect(index);\n  }\n\n  render() {\n    const { notes, selectedNote } = this.props;\n\n    return (\n      <div className='NotesList'>\n          {\n            notes.map((note, index) => (\n              <Note\n                key = { index }\n                index = { index }\n                title = { note.title }\n                isSelected = { index === selectedNote }\n                onNoteSelect={ this.onNoteSelect }\n              />\n            ))\n          }\n      </div>\n    );\n  }\n}\n\nexport default NotesList;","import React, { Component } from 'react';\nimport Toolbar from '../Toolbar/Toolbar'\nimport Editor from '../Editor/Editor';\nimport NotesList from '../NotesList/NotesList';\nimport './App.css';\n\nclass App extends Component {\n\n  constructor() {\n    super();\n\n    const notes = JSON.parse(localStorage.getItem(\"notes\")) || [];\n\n    this.state = {\n      notes: notes,\n      selectedNote: 0\n    }\n  }\n\n  saveNotes = () => {\n    localStorage.setItem(\"notes\", JSON.stringify(this.state.notes));\n  }\n\n  addNewNote = () => {\n    const { notes } = this.state;\n\n    notes.unshift({ text: '', title: 'New Note' });\n    this.setState({ notes, selectedNote: 0 });\n    this.saveNotes();\n  }\n\n  deleteCurrentNote = () => {\n    const { notes, selectedNote } = this.state;\n\n    // notes.shift();\n    notes.splice(selectedNote, 1);\n    const selected = notes[selectedNote] ? selectedNote : notes.length - 1;\n    this.setState({ notes, selectedNote: selected });\n    this.saveNotes();\n  }\n\n  changeSelectedNote = (noteIndex) => {\n    this.setState({ selectedNote: noteIndex});\n  }\n\n  updateNoteValue = (value) => {\n    const { selectedNote, notes } = this.state;\n\n    const newNotes = notes.slice();\n    newNotes[selectedNote].text = value;\n    newNotes[selectedNote].title = value.split('\\n')[0];\n\n    this.setState({ notes: newNotes });\n    this.saveNotes();\n  }\n\n  render() {\n    const { selectedNote, notes } = this.state;\n\n    const noteText = notes.length > 0 ? notes[selectedNote].text : '';\n\n    return (\n      <div className=\"App\">\n        <div className=\"ToolbarGrid\">\n          <Toolbar\n            onAdd={ this.addNewNote }\n            onDelete={ this.deleteCurrentNote }\n          >\n          </Toolbar>\n        </div>\n        <div className=\"NotesListGrid\">\n          <NotesList\n            notes={ notes }\n            selectedNote={ this.state.selectedNote }\n            onNoteSelect={ this.changeSelectedNote }\n          />\n        </div>\n        <div className=\"EditorGrid\">\n          <Editor\n            noteText={ noteText }\n            onNoteChange={ this.updateNoteValue }\n            isEnabled={ !!notes && notes.length > 0 }\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'font-awesome/css/font-awesome.min.css';\nimport App from './App/App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}